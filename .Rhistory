data("credit_data")
library(tidyverse)
data("credit_data")
library(datasets)
data("credit_data")
url="http://freakonometrics.free.fr/german_credit.csv"
dataset <- read.csv(url, header = TRUE, sep = ",")
library(tidyverse)
dataset <- as_tibble(dataset)
class(dataset)
print(dataset)
names(dataset)
colnames(dataset)
rownames(dataset)
names(dataset)
colnames(dataset)
names(dataset)
str(dataset$Sex...Marital.Status)
head(dataset, 1)
table(dataset$Creditability)
dataset %>%
filter(Creditability ==0)
dataset %>%
filter(Creditability ==0) %>%
head(n=5)
dataset %>%
filter(Creditability ==0) %>%
order_by(edad)
dataset %>%
filter(Creditability ==0) %>%
order_by(edad) %>%
head(n=5)
dataset %>%
filter(Creditability ==0) %>%
order_by(edad, call='ASC') %>%
head(n=5)
dataset %>%
filter(Creditability ==0) %>%
arrange(desc(edad)) %>%
head(n=5)
colnames(dataset)
# rownames(dataset) # devuelve los números de las filas...
dataset %>%
filter(Creditability ==0) %>%
arrange(desc(Age..years.)) %>%
head(n=5)
dataset %>%
group_by(Creditability)
dataset %>%
group_by(Purpose)
dataset %>%
group_by(Purpose) %>%
summarize(cantidad = n())
colnames(dataset)
# rownames(dataset) # devuelve los números de las filas...
dataset %>%
select(Creditability, Credit.Amount) %>%
head(n=5)
dataset %>%
mutate(Avg.Amount = mean(Credit.Amount)) %>%
head(n=5)
dataset %>%
mutate(Default = ifelse(Creditability==0, 'Yes', 'No')) %>%
head(n=5)
dataset %>%
mutate(Default = ifelse(Creditability==0, 'Yes', 'No')) %>%
dataset %>%
mutate(Default = ifelse(Creditability==0, 'Yes', 'No')) %>%
head(n=5)
dataset %>%
mutate(Default = ifelse(Creditability==0, 'Yes', 'No'))
class(dataset)
library(tidyverse) # dplyr
dataset <- as_tibble(dataset)
class(dataset)
print(head(dataset, n= 5))
library(tidyquant)
tq_get_options()
start <- Sys.Date() - 360
start
start <- Sys.Date() - 360
acciones <- tq_get(c("FB", "AMZN"),
get  = c("stock.prices", "dividends"),
from = start,
to   = Sys.Date()) # se puede entrar una fecha especifica entre comillas, como p.ej.: "2019-03-01"
head(acciones)
acciones[[2]]
acciones
amazon <- acciones[2,2]
head(amazon)
amazon <- acciones[2, "stock.prices"]
head(amazon)
amazon <- acciones[[2, "stock.prices"]]
head(amazon)
class(acciones)
start <- Sys.Date() - 365
acciones <- tq_get(c("FB", "AMZN"), # tickers
get  = c("stock.prices", "dividends"),
from = start,
to   = Sys.Date()) # se puede entrar también una fecha específica (entre comillas), como p.ej.: "2019-03-01"
head(acciones)
amazon <- acciones[[2, "stock.prices"]]
head(amazon)
tq_exchange_options()
tq_index_options()
tq_get_options() # vamos a utilizar opción [1] "stock.prices"
glimpse(SP500)
glimpse(sp500)
tq_index_options("SP500")
tq_index_options(SP500)
library(tidyquant)
tq_exchange_options()
tq_index_options()
glimpse(SP500)
tq_index()
tq_index('SP500')
tq_exchange(AMEX)
tq_exchange("AMEX")
tq_exchange("AMEX")
tq_index('SP500')
library(XLConnect)
install.packages("XLConnect")
library(XLConnect)
tq_exchange("AMEX")
tq_index("SP500"")
glimpse(SP500)
library(XLConnect)
tq_exchange("AMEX")
tq_index("SP500")
glimpse(SP500)
library(XLConnect)
tq_index("SP500")
glimpse(SP500)
tq_exchange("NYSE")
tq_index("SP500")
library(XLConnect)
tq_exchange("AMEX")
glimpse(tq_index("SP500"))
library(XLConnect)
#tq_exchange("AMEX")
glimpse(tq_index("SP500"))
library(tidyverse)
library(tidyverse)
acciones.selecccioandos <- sp500 %>%
inner_join(rbind(nyse,nasdaq) %>%
select(symbol,last.sale.price, market.cap, ipo.year),by=c("symbol")) %>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filtrar por ipo<2000 y market.cap <> NA
arrange(desc(weight)) %>% # ordenar el resultado de forma descendente por el atributo de la ponderación (weight)
slice(1:10) # mostrar las primareas 10 entradas
library(tidyverse)
tq_index("SP500")
acciones.seleccion <- SP500 %>%
inner_join(rbind(nyse,nasdaq) %>%
select(symbol,last.sale.price, market.cap, ipo.year),by=c("symbol")) %>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filtrar por ipo<2000 y market.cap <> NA
arrange(desc(weight)) %>% # ordenar el resultado de forma descendente por el atributo de la ponderación (weight)
slice(1:10) # mostrar las primareas 10 entradas
library(tidyverse)
sp500 <- tq_index("SP500")
nyse <- tq_index("NYSE")
nasdaq <- tq_index("NASDAQ")
acciones.seleccion <- sp500 %>%
inner_join(rbind(nyse,nasdaq) %>%
select(symbol,last.sale.price, market.cap, ipo.year),by=c("symbol")) %>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filtrar por ipo<2000 y market.cap <> NA
arrange(desc(weight)) %>% # ordenar el resultado de forma descendente por el atributo de la ponderación (weight)
slice(1:10) # mostrar las primareas 10 entradas
library(tidyverse)
sp500 <- tq_index("SP500")
acciones.seleccion <- sp500 %>%
inner_join(rbind(nyse,nasdaq) %>%
select(symbol,last.sale.price, market.cap, ipo.year),by=c("symbol")) %>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filtrar por ipo<2000 y market.cap <> NA
arrange(desc(weight)) %>% # ordenar el resultado de forma descendente por el atributo de la ponderación (weight)
slice(1:10) # mostrar las primareas 10 entradas
sp500 <- tq_index("SP500")
sp500
sp500 <- tq_index()
sp500 <- tq_index("SP500")
nyse <- tq_index("NYSE")
nasdaq <- tq_index("NASDAQ")
library(tidyverse)
nyse <- tq_exchange("NYSE")
nasdaq <- tq_exchange("NASDAQ")
sp500 <- tq_index("SP500")
acciones.seleccion <- sp500 %>%
inner_join(rbind(nyse,nasdaq) %>%
select(symbol,last.sale.price, market.cap, ipo.year),by=c("symbol")) %>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filtrar por ipo<2000 y market.cap <> NA
arrange(desc(weight)) %>% # ordenar el resultado de forma descendente por el atributo de la ponderación (weight)
slice(1:10) # mostrar las primareas 10 entradas
nyse
nasdaq
rbind(nyse,nasdaq
nyse_nadaq <- rbind(nyse,nasdaq)
nyse
nasdaq
nyse
library(tidyverse)
nyse <- tq_exchange("NYSE")
nasdaq <- tq_exchange("NASDAQ")
nyse_nasdaq <- rbind(nyse,nasdaq)
sp500 <- tq_index("SP500")
acciones.seleccion <- sp500 %>%
select(symbol,last.sale.price, market.cap, ipo.year)%>% # join datasets
inner_join(nyse_nasdaq, by=c("symbol"))%>%
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filtrar por ipo<2000 y market.cap <> NA
arrange(desc(weight)) %>% # ordenar el resultado de forma descendente por el atributo de la ponderación (weight)
slice(1:10) # mostrar las primareas 10 entradas
sp500
sp500
nyse_nasdaq <- rbind(nyse,nasdaq)
nyse_nasdaq
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
arrange(desc(weight)) %>% # sort in descending order
slice(1:10)
sp500
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
arrange(desc(weight)) %>% # sort in descending order
slice(1:10)
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
arrange(desc(.$weight)) %>% # sort in descending order
slice(1:10)
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
arrange(desc(sp$weight)) %>% # sort in descending order
slice(1:10)
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
arrange(desc(sp500$weight)) %>% # sort in descending order
slice(1:10)
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
arrange(desc(weight)) %>% # sort in descending order
slice(1:10)
sp500
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
#arrange(desc(weight)) %>% # sort in descending order
slice(1:10)
head(acciones.seleccion)
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, weight, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
arrange(desc(weight)) %>% # sort in descending order
slice(1:10)
head(acciones.seleccion)
dataset %>%
select(Creditability, Credit.Amount) %>%
head(n=5)
acciones.seleccion <- sp500 %>%
inner_join(nyse_nasdaq, by=c("symbol")) %>%
select(symbol,last.sale.price, market.cap, weight, ipo.year)%>% # join datasets
filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
arrange(desc(weight)) %>% # sort in descending order
slice(1:10)
print(acciones.seleccion)
library(tidyquant)
tbills <- tq_get(c("TB1YR","TB3MS"), get = "economic.data") %>%
group_by(symbol)
head(tbills)
library(eurostat)
install.packages("eurostat")
library(eurostat)
library(eurostat)
library(eurostat)
install.packages('eurostat')
system("locate eurostat")
system("locate eurostat")
library(eurostat)
library("eurostat", lib.loc="~/R/win-library/3.5")
install.packages("sf")
library(eurostat)
library(sf)
library(eurostat)
library("dbplyr", lib.loc="~/R/win-library/3.5")
library(eurostat)
install.packages("dbplyr")
library("dplyr", lib.loc="~/R/win-library/3.5")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(eurostat)
install.packages("Rcpp")
library(eurostat)
install.packages("dplyr")
library(eurostat)
?eurostat
library(eurostat)
get_eurostat_toc()
library(eurostat)
contenido <- get_eurostat_toc()
library(knitr)
kable(head(contenido))
kable(head(search_eurostat("finance")))
kable(head(search_eurostat("interest rates")))
id <- search_eurostat("Money market interest rates - annual data",
type = "table")$code[3]
print(id)
id <- search_eurostat("Money market interest rates - annual data",
type = "dataset")$code[3]
print(id)
id <- search_eurostat("Money market interest rates - annual data",
type = "dataset")$code[1]
print(id)
datos <- get_eurostat(id, time_format = "num")
kable(head(search_eurostat("interest rates")), n=25)
str(datos)
glimpse(datos)
head(datos)
str(datos)
head(datos, n=10)
dataset <- list(1,2,3)
dataset
dataset3 <- c("Juan", María")
dataset1 <- list(1,2,3)
dataset1
dataset2 <- 1:5
dataset3 <- c("Juan", María")
data.list <- list(dataset1, dataset2, dataset3)
dataset1 <- list(1,2,3)
dataset1
dataset2 <- 1:5
dataset3 <- c("Juan", "María")
data.list <- list(dataset1, dataset2, dataset3)
data.list
lapply(data.list, function(x) x[, 2])
lapply(data.list, function(x) x[, 1])
lapply(data.list, function(x) x[2, ])
lapply(data.list, function(x) x[1, ])
sapply(data.list, function(x) x[1, ])
data.list
dataset1 <- list(1:3)
dataset1
dataset2 <- list(4:6)
dataset3 <- List(7:9)
data.list <- list(dataset1, dataset2, dataset3)
data.list
dataset1 <- list(1:3)
dataset1
dataset2 <- list(4:6)
dataset3 <- list(7:9)
data.list <- list(dataset1, dataset2, dataset3)
data.list
sapply(data.list, function(x) x[1, ])
sapply(data.list, function(x) x[ ,1])
sapply(data.list, function(x) x[[1, ]])
lapply(data.list, function(x) x[1, ])
dim(data.list)
mapply(data.list, function(x) x[1, ])
data.list[[,1]]
data.list[1][1]
data.list[2][1]
mapply(data.list, function(x) x[2][1])
lapply(data.list, function(x) x[2][1])
lapply(data.list, function(x) x[1][1])
lapply(data.list, function(x) x[1][2])
lapply(data.list, function(x) x[2][1])
sapply(data.list, function(x) x[1][1])
sapply(data.list, function(x) x[1][1,2])
sapply(data.list, function(x) x[1][2])
sapply(data.list, function(x) x[1][[2]])
data.list[2][1]
data.list[2][[1]]
data.list[2][2]
data.list[2][1]
data.list[2][1][2]
data.list[[2][1]]
data.list[[2][1]][1]
data.list[2][1]
data.list[2]
data.list[[2]]
data.list[[2]][2]
sapply(data.list, function(x) x[1][[2]])
sapply(data.list, function(x) x[1][1])
sapply(data.list, function(x) x[1])
sapply(data.list, function(x) x[2])
sapply(data.list, function(x) x[1])
dataset1[2]
dataset1[]
dataset1[1,2]
dataset1[2]
dataset1[[2]]
dataset1[[1]][2]
dataset1[[1]][2]
data.list[2]
data.list[[1]][2]
data.list[[1]][1]
data.list[[1]][1][2]
data.list[[1]][1]
data.list[[[1]][1]][2]
data.list[2]
data.list[[2]]
data.list[[2]][2]
data.list[[2]][1]
data.list[0][1]
data.list[0][2]
data.list[1][2]
data.list[[2]][1]
data.list[[2]][1][1]
data.list[[2]][[1]][1]
data.list[[2]][[1]][2]
data.list[1][2]
data.list[[2]][[1]][2] # 5
sapply(data.list, function(x) x[1][1])
sapply(data.list, function(x) x[[1]][1])
sapply(data.list, function(x) x[[1]][2])
sapply(data.list, function(x) x[1][1])
sapply(data.list, function(x) x[[1]][2] + 1)
dataset1 <- list(1:3)
dataset1
dataset2 <- list(4:6)
dataset3 <- list(7:9)
#unir las 3 listas en una nueva lista
data.list <- list(dataset1, dataset2, dataset3)
data.list
#acceder en el dataset1 al segundo elemento
dataset1[[1]][2] #2
# acceder al segundo elemento de la segunda lista (dataset2)
data.list[[2]][[1]][2] # 5
# sapply() permite iterar sobre los elementos de una lista y devuelve una lista o un vector (no una lista como lapply).
# (en este sentido sapply es una versión simple de lapply).
# acceder a la lista "data.list", utilizando una función(),
# sin utilizar un for loop:
# acceder a todos los elementos (dataset1, dataset2, dataset3) de la lista "data.list"
sapply(data.list, function(x) x[1][1]) # 1 2 3  4 5 6  7 8 9
# acceder al segundo elemento de cada lista (dataset1, dataset2, dataset3) dentro de la lista "data.set"
sapply(data.list, function(x) x[[1]][2]) # 2 5 8
# agregar el valor de "1" al segundo elemento de cada lista (dataset1, dataset2, dataset3) dentro de la lista "data.set"
sapply(data.list, function(x) x[[1]][2] + 1) # 3 6 9
dataset <-  data.frame(id= 1:10,
Nombre = c("Jimmy", "Joe", "Diana", "Cris", "Manuela", "Lucia",
"Andres", "Bill", "Gabriel", "Javier"),
Apellido = c("Toro", "Arango", "Ramirez", "Mesa", "Meier", "Müller",
"Avelaez", "Jaramillo", "Arias", "Gomez"),
Ingresos = 4000000, 3500000, 3000000, 2500000, 2000000, 1500000, 1000000, 750000, 500000, 450000,
Egresos = 3500000, 4000000, 3000000, 2000000, 1000000, 1400000, 1000000, 800000, 500000, 450000,
Calificacion = 80, 20, 50, 70, 70, 45, 40, 10, 12, 10
)
print(dataset) # imprimir el dataset a la pantalla (consola)
dataset <-  data.frame(id= 1:10,
Nombre = c("Jimmy", "Joe", "Diana", "Cris", "Manuela", "Lucia",
"Andres", "Bill", "Gabriel", "Javier"),
Apellido = c("Toro", "Arango", "Ramirez", "Mesa", "Meier", "Müller",
"Avelaez", "Jaramillo", "Arias", "Gomez"),
Ingresos = c(4000000, 3500000, 3000000, 2500000, 2000000, 1500000, 1000000, 750000, 500000, 450000),
Egresos = c(3500000, 4000000, 3000000, 2000000, 1000000, 1400000, 1000000, 800000, 500000, 450000),
Calificacion = c(80, 20, 50, 70, 70, 45, 40, 10, 12, 10)
)
print(dataset) # imprimir el dataset a la pantalla (consola)
aplly(dataset, 1, mean)
apply(dataset, 1, mean)
apply(dataset, 1, mean(na.rm))
apply(dataset, 1, mean(na.rm=TRUE))
apply(dataset, 1, mean(.,na.rm=TRUE))
apply(dataset, 1, mean( ,na.rm=TRUE))
apply(dataset, 1, count)
apply(dataset, 1, nrow)
apply(dataset, 1, ncol)
apply(dataset, 1, max)
apply(dataset, 2, max) # 1 = por columnas
aplly(dataset$Ingresos, 2, mean)
apply(dataset$Ingresos, 2, mean)
apply(dataset[,4], 2, mean)
dim(dataset)
apply(dataset, 2, is.na)
class(dataset)
apply(dataset, 2, is.numeric)
apply(dataset, 1, is.numeric)
str(dataset)
str(dataset)
apply(dataset, 2, is.numeric)
apropos(%is.%)
apropos(is.)
apropos(is)
apropos('is.')
str(dataset)
apply(dataset, 2, is.character)
str(dataset)
dataset.num <- dataset["id", "Ingresos", "Egresos", "Calificacion"]
dataset
dataset.num <- dataset[ ,"id", "Ingresos", "Egresos", "Calificacion"]
dataset.num <- dataset[ , c("id", "Ingresos", "Egresos", "Calificacion")]
dataset.num <- dataset[ , c("id", "Ingresos", "Egresos", "Calificacion")]
print(dataset.num)
apply(dataset.num, 2, mean)
mean(dataset$Ingresos) # validación
apply(dataset.num, 2, mean) # calcula el promedio por columna (2)
mean(dataset$Ingresos) # validación
install.packages("bookdown")
install.packages("bookdown")
