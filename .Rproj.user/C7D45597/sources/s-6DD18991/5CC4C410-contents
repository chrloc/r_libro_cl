# Bucles / ciclos {#bucles}

## Objetivo

Programar un ciclo de una forma "sencilla". Es decir, un secuencia de comandos que se ejecuta repetidas veces, pero sin escribir mucho código.

## ¿Qué son las funciones del tipo "apply()"? 

**Respuesta:** ciclos, bucles o "loops"

1. apply - se utiliza para una matriz. Para "iterar" sobre sus filas o columnas.
2. tapply - se utiliza para una matriz para extraer subconjuntos de datos y aplicar una función sobre ellos. Para data frames es parecido al concepto de "group by" en SQL (Standard Query Language)
3. eapply - se utiliza para un entorno (environment (E))
4. lapply - se utiliza para iterar sobre los elementos de una lista ( list (L))
5. sapply - una versión más sencilla de lapply. Es decir, simplifica el resultado (simplify (S)), ya que el resultado no se muestra como una lista, sino como matriz o vector
6. vapply - devuelve un valor predeterminado (pre-defined return value (V))
7. replicate - ejecuta una función varias veces y se utiliza, en términos generales, en la generación de números (variables) aleatorios
8. mapply - versión multivariada (multivariate (M)) de sapply. Los argumentos de la función se pueden "reciclar"
9. rapply - una versión recursiva de lapply (recursive (R) version)

A continuación, nos enfocamos en la aplicación de las funciones: apply, lapply y sapply. Dónde, apply se utiliza para matrices y lapply y sapply para listas y vectores.

- Consultar la ayuda para la función apply

```{r}
?apply
```

## apply

Apply tiene la siguiente signatura: apply(X, MARGIN, FUN, ...) 
Donde, x es una matriz y margin es 1 (rows) o 2 (columns) y FuN es una función (function), p.ej. una función parecida a la función promedio: mean()

- Generar primero "manualmente" un data frame "dataset" con los siguientes datos para poder demostrar después el funcionamiento de las funciones del tipo apply()


|id |	Nombre	|Apellido	 |Ingresos	|Egresos	|Calificación
----|---------|----------|----------|---------|------------
|1  |	Jimmy	  |Toro		   |4000000	  |3500000	|80
|2  |	Joe	    |Arango		 |3500000	  |4000000	|20
|3  |	Diana	  |Ramírez	 |3000000	  |3000000	|50
|4  |	Cris	  |Mesa		   |2500000	  |2000000	|70
|5  |	Manuela	|Meier		 |2000000	  |1000000	|70
|6  |	Lucia	  |Müller		 |1500000	  |1400000	|45
|7  |	Andrés	|Aveláez	 |1000000	  |1000000	|40
|8  |	Bill	  |Jaramillo |750000		|800000		|10
|9  |	Gabriel	|Arias	   |500000		|500000		|12
|10 |	Javier	|Gómez		 |450000		|450000		|10

```{r}
dataset <-  data.frame(id= 1:10,
                       Nombre = c("Jimmy", "Joe", "Diana", "Cris", "Manuela", "Lucia", 
                                  "Andrés", "Bill", "Gabriel", "Javier"),
                       Apellido = c("Toro", "Arango", "Ramírez", "Mesa", "Meier", "Müller", 
                                    "Aveláez", "Jaramillo", "Arias", "Gómez"),
                       Ingresos = c(4000000, 3500000, 3000000, 2500000, 2000000, 1500000, 1000000, 750000, 500000, 450000),
                       Egresos = c(3500000, 4000000, 3000000, 2000000, 1000000, 1400000, 1000000, 800000, 500000, 450000),
                       Calificacion = c(80, 20, 50, 70, 70, 45, 40, 10, 12, 10)
                       )

class(dataset)
print(dataset) # imprimir el dataset a la pantalla (consola)
```

- Determinar el valor máximo para las filas (para cada fila) del dataset, utlizando apply() con la función max

```{r}
apply(dataset, 1, max) # 1 = por filas
```

- Determinar el valor máximo para las columnas (para cada columna) del dataset, utilizando apply/() con la función max

```{r}
apply(dataset, 2, max) # 2 = por columnas
```

- Determinar, si el dataset tiene datos faltantes, utilizando apply con la función is.na

```{r}
apply(dataset, 2, is.na)
```

- Determinar la estructura del dataset, utilizando la función str()

```{r}
str(dataset) # data frame
```

Mejor es, utilizar únicamente datos numéricos para las siguientes operaciones.

- De acuerdo con lo anterior, generar una variable "dataset.num" a partir del dataset, utilizando las siguientes columnas (numéricas): "Ingresos", "Egresos" y "Calificacion"

```{r}
dataset.num <- dataset[ , c("Ingresos", "Egresos", "Calificacion")]
print(dataset.num)
```

- Determinar para "dataset.num" el promedio por filas, utilizando apply() con mean

```{r}
apply(dataset.num, 1, mean) # calcula el promedio por columna (2)
```

- Determinar para "datset.num" el promedio por columnas, utilizando apply() con mean

```{r}
apply(dataset.num, 2, mean) # calcula el promedio por columna (2)
#mean(dataset$Ingresos) # validación para la columna "ingresos"
```

- Determinar el promedio para la tercera fila del dataset.num

```{r}
apply(dataset.num[3, ], 1, mean) # 1 = por filas
```

### apply vs for (for loop)

- Comparar apply() con un bucle (loop), utilizando for(), para calcular el promedio para cada fila.

```{r}
#loop
output <- NULL # preparando un vector vacío
nrow(dataset.num) # 10; comprobando por la cantidad de filas del data frame
for(i in 1:nrow(dataset.num)){
  output[i] <- mean(as.numeric(dataset.num[i, ])) # aqui as.numeric es obligatorio
}
print(output)
```

- Hacer lo mismo que lo anterior (for loop), pero utilizando apply() en lugar de for, lo que significa escribir menos código...
Después, utilizar rowMeans(), que debe arrojar el mismo resultado en este caso

```{r}
apply(dataset.num, 1, mean)
rowMeans(dataset.num) # da igual
```

## lapply

Utilizar lapply(), lo que devuelve una lista.
Es decir, apply y lapply se diferencian en el sentido, que lapply recibe y devuelve una lista.

- Vamos a crear entonces una lista de 3 data frames (dataset.A, dataset.B y dataset.C), para tener tres veces el dataset.num y
- Colocar estos tres data frames en una lista con el nombre dataset.list
- Mostar dataset.list en la pantalla, utilizando el comando print()
- Ahora, extraer de esta lista de cada data frame el primer elemento, utilizando lapply()

```{r}
dataset.A <- dataset.num
dataset.B <- dataset.num
dataset.C <- dataset.num
# class(dataset.A) # [1] "data.frame"
dataset.list <- list(dataset.A, dataset.B, dataset.C)
print(dataset.list)
lapply(dataset.list, "[", 1, 1) # una lista con 3 veces: 4000000 o 4e+06
# donde [ se refiere a los segundos corchetes ya que R sabe que estamos iterando sobre los elementos de una lista.
# lapply(dataset.list, "[", 1, 1) es igual a:
# dataset.list[[1]][1,1]; dataset.list[[2]][1,1]; dataset.list[[3]][1,1]
```

- Utilizando lapply() y la función rowMeans(), determinar el promedio de cada fila para los 3 elementos (data frames) en datset.list
- Luego, en lugar de utilizar rowMeans(), aplicar una función (es decir, function (x)) para acceder al primer elemento de cada uno de los 3 data frames de dataset.list

```{r}
lapply(dataset.list, rowMeans)
lapply(dataset.list, function(x) x[1,1]) # 3 veces: 4e+06
```

- Calcular la diferencia (resta) entre los valores de la primera y la segunda fila para cada uno de los 3 data frames de dataset.list. Es decir, valores de la primera fila menos valores de la segunda fila

```{r}
lapply(dataset.list, function(z) z[1,] - z[2,]) # Ingresos y Egresos: 5e+05 Cali. 60
```

## sapply

En comparación con el comando anterior de lapply(), el comando sapply() recibe una lista, pero devuelve un vector (o una matriz).
En este sentido, sapply es una versión más simple de lapply, ya que se devuelve un vector (matriz) en lugar de una lista, lo que es más fácil a leer y entender.

- Ahora, extraer del data frame dataset.list de cada data frame el primer elemento, utilizando sapply() y observar la diferencia con respecto a lapply()

```{r}
sapply(dataset.list, "[", 1, 1) # devuelve un vector con 3 elementos: [1] 4e+06 4e+06 4e+06
```

- Ahora, extraer la segunda columna ("Egresos"") de cada uno de los 3 data frames en la lista (dataset.list)
- Luego, extraer los valores de la segunda fila de cada uno de los 3 data frames en la lista (dataset.list)
- Después, extraer los valores de la segunda fila de cada uno de los 3 data frames en la lista (dataset.list), pero únicamente los valores de las segunda hasta la tercera columna

```{r}
sapply(dataset.list, "[", 2)  # 2 para la segunda columna... (como vector)
sapply(dataset.list, "[", 2, ) # segunda fila, todas las columnas (como matriz)
sapply(dataset.list, "[", 2, 2:3) # segunda fila, columnas 2 hasta 3 (como matriz)
```

¿Cuál es el valor mínimo en cada fila de los 3 data frames de dataset.list?

```{r}
sapply(dataset.list, apply, 1, min)
which.min(dataset.list[[1]][1,]) # indica que los valores mínimos son en la tercera columna ("Calificacion")
```

## Ejercicio 6

- Utilizar el conjunto de datos "iris", que se instaló con R: data(iris)
- Ver la siguiente descripción al respecto: https://es.wikipedia.org/wiki/Conjunto_de_datos_flor_iris
- Mostrar las primeras 5 filas de "iris" en la pantalla
- Utlizando la función apply, calcular el promedio de cada columna del dataset "iris", que contiene números
- Realizar el mismo cálculo, utilizando la función lapply (en lugar de apply())
- Con base en los resultados obtenidos, explicar la diferencia entre apply y lapply
- Ahora bien, realizar el mismo cálculo (promedio de las columnas), pero utilizando un ciclo (bucle), aplicando la función for()

