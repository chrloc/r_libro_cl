# El paquete tidyverse y su funcionalidad {#tidy}

## Objetivo y contextualización

Conocer un sistema "interesante" de paquetes en R para agilizar la programación y lectura de código.

El tidyverse es un sistema coherente de varios paquetes para la manipulación, exploración y visualización de datos. Los elementos de tidyverse comparten una filosofía de diseño común.

Los elementos del tidyverse conforman un conjunto de paquetes. La siguiente página web informa sobre estos: https://www.tidyverse.org/packages/

El siguiente vínculo presenta una visualización gráfica y panorámica del tidyverse: https://rviews.rstudio.com/post/2017-06-09-What-is-the-tidyverse_files/tidyverse1.png

Tidy data se refiere a "datos ordenados". Es un término que describe un enfoque estandarizado para estructurar conjuntos de datos para facilitar su análisis y las visualizaciones [Frigaard, M. (12/05/2017). Getting Started with tidyverse in R](http://www.storybench.org/getting-started-with-tidyverse-in-r/)

Hay tres principios para los datos ordenados [Frigaard, M. (12/05/2017). Getting Started with tidyverse in R](http://www.storybench.org/getting-started-with-tidyverse-in-r/):

- Variables conforman las columnas
- Las observaciones forman las filas
- Los valores entran en las celdas

## tibble (parte del ecosistema tidyverse)

Un tibble, o tbl_df, es una presentación moderna de un data frame. Manteniendo elementos que en el tiempo se han demostrado como efectivo y descartando lo que no lo es (https://tibble.tidyverse.org/).

- Leer algunos datos de la web (http://freakonometrics.free.fr/german_credit.csv), desde un archivo csv ... [véase](#cargar) y asignar el resultado a una variable "dataset"

```{r}
url="http://freakonometrics.free.fr/german_credit.csv"
dataset <- read.csv(url, header = TRUE, sep = ",")
```

- Transformar estos datos a un tibble, utilizando la función as_tibble() del paquete tidyverse.
- Mostrar en la pantalla las primeras seis filas de este tibble

```{r}
library(tidyverse) # dplyr
?tidyverse
dataset <- as_tibble(dataset)
class(dataset)  # [1] "tbl_df"     "tbl"        "data.frame"
print(head(dataset, n= 5))
```

- Ver los nombres de las variables (columnas).

```{r}
colnames(dataset) # devuelve los nombres de las columnas
# rownames(dataset) # devuelve los números de las filas...
```

- Mostrar, en una tabla (de frecuencias), las frecuencias para los valores (binarios) de la variable "Creditability" (columna "Creditability"), utilizando la función table()
- Observar el resultado: ¿Cuántas observaciones son de "buena paga"?

```{r}
table(dataset$Creditability) # 300 = 0 y 700 = 1, donde 1 significa "buena calidad crediticia"
```

## Utilizar y aplicar funciones del tidyverse

### filter

- Filtrar el dataset, por ejemplo por el campo Creditability == 0, utilizando tidyverse con el comando pipe [ %>% ] y la función filter()
- Mostrar las primeras 5 filas

```{r}
dataset %>%
  filter(Creditability == 0) %>% 
  head(n=5)
```

### arrange

- Ordenar el resultado anterior por la columna edad (Age..years.) de manera descendente, utilizando la función arrange()

```{r}
dataset %>%
  filter(Creditability ==0) %>% 
  arrange(desc(Age..years.)) %>% 
  head(n=5)
```

### group_by y summarize

- Contar las observaciones por el campo destino ("Purpose") del crédito, utilizando la función group_by() y la función summarize()
- Mostrar el resultado en la pantalla

```{r}
dataset %>%
  group_by(Purpose) %>% 
  summarize(cantidad = n())
```

### select

- Seleccionar únicamente las columnas "Creditability"" y "Credit.Amount"" del dataset, utilizando la función select(), y mostrar las primeras 5 filas

```{r}
dataset %>%
  select(Creditability, Credit.Amount) %>% 
  head(n=5)
```

### mutate

- Agregar una nueva columna "Avg.Amount" al dataset que contiene el promedio del monto del crédito (Credit.Amount), utilizando la función mutate()
- Mostrar las primeras 5 filas del "dataset"

```{r}
dataset %>%
  mutate(Avg.Amount = mean(Credit.Amount)) %>% 
  head(n=5)
```

- Agregar una nueva columna "Default" al dataset, que contiene el valor "Yes", si el valor del campo "Creditability" es igual a "0", en el caso contrario, colocar el valor "No". Utilizar la función mutate() con ifelse() al respecto
- Mostrar las primeras 5 filas del "dataset"

```{r}
dataset %>%
  mutate(Default = ifelse(Creditability==0, 'Yes', 'No')) %>% 
  head(n=5)
# o con case_when()
# dataset <-  dataset %>%
#   mutate(Default = case_when(Creditability == 1 ~ 'No',
#                                    Creditability == 0 ~ 'Yes' ))
```

## Ejercicio más avanzado 

### Procesar datos bursátiles con pipes (%>%)

- Cargar el paquete (library) tidyverse
- Bajar los datos de la bolsa New York Stock Exchange (NYSE), mediante la función tq_exchange("NYSE") y asignar el resultado a la variable "nyse"
- Bajar los datos de la bolsa NASDAQ, mediante la función tq_exchange("NASDAQ") y asignar el resultado a la variable "nasdaq"
- Unir los registros de las dos fuentes de datos (variables) "nyse" y "nasdaq", utlizando la función rbind(), creando una variable nueva "nyse_nasdaq"
- Bajar los datos del indice búrsatil S&P500 (SP500), mediante la función tq_index("SP500") y asignar el resultado a la variable "sp500"
- Une "sp500" y "nyse_nasdaq", utilizando un "inner join" (función inner_join()) y tomando el atributo (columna) "symbol", dado que estas dos fuentes tienen este atributo en común
- Filtrar por registros, donde el año del IPO ("ipo.year") es menor al año 2000 y donde el campo "market.cap" *no* tiene datos faltantes (NA)
- Ordenar por el campo (columna) "weight" de forma descendente
- y mostrar únicamente las primeras 10 filas, utilizando la función slice()
- Mostrar el resultado en la pantalla

Es decir, lo que se hace aquí es que queremos utilizar el conjunto de datos que consiste, por un lado, en las diez acciones más grandes dentro del índice S&P500, que tuvieron su IPO antes de enero del año  2000. Por otro lado, debemos combinar ambos conjuntos de datos ("S&P500" y "NYSE más NASDAQ", usando un "inner join", porque solo queremos mantener los símbolos del S&P500, que también se negocian en NYSE o NASDAQ [Stöckl, S. (21/09/2018). Tidy Portfoliomanagement in R](https://bookdown.org/sstoeckl/Tidy_Portfoliomanagement_in_R/s-2Data.html#fnref1). 

```{r}
library(tidyverse)
library(tidyquant) # debe ser la versión actual (>=0.5.9)
tq_exchange_options() # "AMEX"   "NASDAQ" "NYSE"
nyse <- tq_exchange("NYSE")
nasdaq <- tq_exchange("NASDAQ")
nyse_nasdaq <- rbind(nyse,nasdaq)
sp500 <- tq_index("SP500")
acciones.seleccion <- sp500 %>% 
  inner_join(nyse_nasdaq, by=c("symbol")) %>% 
  select(symbol,last.sale.price, market.cap, weight, ipo.year)%>% # join datasets
  filter(ipo.year<2000 & !is.na(market.cap)) %>% # filtrar años con año del ipo<2000 o ipo=NA
  arrange(desc(weight)) %>% # ordenar en orden descendente
  slice(1:10)

print(acciones.seleccion) # se puede observar que AAPL (Apple) es la empresa "más grande"...
```

## Ejercicio 5

- Cargar el paquete "tidyverse"
- Utilizar el conjunto de datos "iris", que se instaló con R: data(iris)
- Ver la siguiente descripción al respecto: https://es.wikipedia.org/wiki/Conjunto_de_datos_flor_iris
- Mostrar las primeras 5 filas de "iris" en la pantalla
- Agrupar los datos de iris por la columna "Species" y asignar el resultado a una variable "iris.por.species", utilizando tidyverse
- Mostrar las últimas 3 filas de "iris.por.species"
- Agregar una columna a "iris.por.species", donde se muestra el valor promedio para los valores de la columna "Sepal.Length", utilizando tidyverse

