# Red Neuronal {#rn}

## Objetivo

El objetivo en este ejemplo consiste en clasificar datos de créditos (credit data), utilizando un modelo de red neuronal (Neural Network)


## Cargar datos

Vamos a utilizar un conjunto de datos de créditos de la web, de la misma fuente que se utilizó antes {#regrLog}.

El objetivo consiste en construir un clasificador, utilizando una red neuronal, para clasificar los registros en dos grupos (clases): "buena paga" y "mala paga".

- Bajar el archivo de los datos de la internet y leer los datos del archivo y asignarlos a una variable "mis.datos"

url <- "http://freakonometrics.free.fr/german_credit.csv"
mis.datos <- read.csv(url, header = TRUE, sep = ",")

```{r rnStart}
url <- "http://freakonometrics.free.fr/german_credit.csv"
mis.datos <- read.csv(url, header = TRUE, sep = ",")
# Estos mismos datos también se pueden bajar de la siguiente dirección:
# url <-  "https://newonlinecourses.science.psu.edu/onlinecourses/sites/stat508/files/german_credit.csv"
# mis.datos <- read.csv(url(direccion))
```

- Mostrar las primeras 3 filas de los datos (mis.datos)
- Mostrar la estructura de los datos

```{r}
head(mis.datos,3)
str(mis.datos)
```
- Eliminar la columna "Telephone" de los datos, ya que estos atributos no pueden explicar la variable de salida ("buena paga" / "mala paga"), asignando un valor NULL a este atributo de mis.datos

```{r}
# eliminar la columna Telephone de los datos
mis.datos$Telephone <- NULL
```

## Normalizar datos

- Normalizar los datos numéricos, menos la variable de salida. Una RNN (red neuronal) típicamente requiere eso (más que otros modelos / algoritmos). Normalizar los datos correspondientes entre 0 y 1. Digamos aquí los siguientes atributos se deben normalizar: Duration.of.Credit..month. , Credit.Amount , Age..years. Es decir, hablamos de las columnas 3, 6 y 14

```{r}
# normalizar los valores entre 0 y 1
# aquí las columnas con valores númericas. Es decir, las columnas 3, 6 y 14
mis.datos[, c(3,6,14)] <- apply(mis.datos[, c(3,6,14)], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X)))
# también con la función scale() esto es posible:
# maxs <- apply(mis.datos[, c(3,6,14)], 2, max)
# mins <- apply(mis.datos[, c(3,6,14)], 2, min)
# mis.datos[,c(3,6,14)] <- scale(mis.datos[, c(3,6,14)], center = mins, scale = maxs - mins)
```


- Variables categóricas podemos someter a "One-Hot-Encoding" para mejorar (potencialmente) el desempeño del modelo (aquí de la red neuronal)
- Las variables categóricas contienen valores de etiqueta (haciendo referencia a una categoría como p.ej. nivel género: M, F) en lugar de valores numéricos
- Por consigiente, se requiere a menudo la transformación de estas variables
- One-Hot-Encoding transforma una variable categórica a un número entero, que el cómputo puede entender "más facilmente".
- Aquí, en el data frame mis.datos las variables categoricas como p.ej. "Occupation" ya son codificados como números (que representan las categorias). Entonces, vamos a dejar los datos como están, sin aplicar el One-Hot-Encoding en este ejemplo


## Particionar los datos

- El próximo paso consiste en particionar los datos en "entrenamiento" y "preubas" de forma 66%/34%

```{r}
# particionar los datos
d <- sample(nrow(mis.datos), nrow(mis.datos)*0.66, replace=FALSE)
train <- mis.datos[d, ]
test <- mis.datos[-d, ]
```

## Crear la Red Neuronal

- Ahora vamos a construir la red neuronal, utilizando el paquete "neuralnet" de R
- Identificar la variable de salida del modelo. Aqui: Creditability
- Tomar el resto de las variables como variables de entrada
- Generar la red neuronal utilizando la función neuralnet() con los parámetros: hidden = c(10,5), linear.output = FALSE, act.fct = 'logistic', threshold = 0.01 (ver para más detalles las páginas de ayuda para neuralnet)

```{r}
if(!require('neuralnet')) install.packages('neuralnet'); library(neuralnet)
rn_model <- neuralnet(Creditability~.,
											data = train,
											hidden = c(10,5),
											linear.output = FALSE,
											act.fct = 'logistic',
											threshold = 0.01)

# act.fct puede ser logistic o tanh
```

- Graficar la red neuronal y observar los "pesos" que la red neuronal asignó a cada variable de entrada (cada variable independiente), utilizando la función plot() con los parámetros "rn_model" y rep='best'

```{r} 
# graficar con plot()
# observar pesos asignados a las variables
plot(rn_model, rep='best')
```

- Ahora, calcular el resultado, utilizando la función compute() con el fin de calcular la red neuronal
- Nota: Esta función recibe como parámetros el modelo "rn_model" y los datos test, pero sin la variable de salida (columna Creditability)
- Asignar el resultado a una variable:  rn_model.resultados

```{r}
# calcular el resultado
rn_model.resultados <- compute(rn_model, test[ , -1])
# head(rn_model.resultados)
```

## Realizar la predicción

- Finalmente, extraer del modelo de la red neuronal construida (rn_model) la predicción, accediendo al atributo net.result y asignar el resultado a una variable "prediccion"
- Utilizar la variable predicción para generar un data frame de dos columnas con los valores actuales de test$Creditability y con la prediccion para esta variable, realizada por el modelo (la red neuronal)
-Nota: La predicción finalmente es un porcentaje

```{r}
#predicción
prediccion_RN <- rn_model$net.result
resultados <- data.frame(actual=test$Creditability, pred=rn_model.resultados$net.result)
head(resultados)
```

- Generar la tabla de clasificación (tabla de confusión) para visualizar de esta forma los resultados (valor actual de Creditibility vs el valor predicho)

```{r}
# tabla de confusión
table(actual=resultados$actual, pred=ifelse(resultados$pred > 0.5, 1, 0)) 
```

- Determinar la exactitud del modelo (red neuronal)

```{r rnEnd}
# exactitud
mean(resultados$actual==ifelse(resultados$pred > 0.5, 1, 0)) # 0.6882353
```
- ¿Qué es lo que se puede decir con respecto a la exactitud del modelo y su capacidad de clasificar los datos / registros (en "buena paga" y "mala paga")?


