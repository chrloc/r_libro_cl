# El paquete tidyverse y su funcionalidad {#tidy}

El tidyverse es un sistema coherente de paquetes para la manipulación, exploración y visualización de datos. Los elementos de tidyverse comparten una filosofía de diseño común.

Los elementos del tidyverse conforman un conjunto de paquetes. La siguiente página web informe sobre léstos: https://www.tidyverse.org/packages/

El siguiente vinculo presenta una visualización grafica y panorámica del tiyverse: https://rviews.rstudio.com/post/2017-06-09-What-is-the-tidyverse_files/tidyverse1.png

Tidy data son "datos ordenados". Es un término que describe un enfoque estandarizado para estructurar conjuntos de datos para facilitar su análisis y las visualizaciones [Frigaard, M. (12/05/2017). Getting Started with tidyverse in R](http://www.storybench.org/getting-started-with-tidyverse-in-r/)

Hay tres principios para los datos ordenados [Frigaard, M. (12/05/2017). Getting Started with tidyverse in R](http://www.storybench.org/getting-started-with-tidyverse-in-r/):

- Variable conforman las columnas
- Las observaciones forman las filas
- Los valores entran en las celdas

## tibble

Un tibble, o tbl_df, es una presentación moderna de un data frame. Mmanteniendo elementos que en el tiempo se han demostrado como  efectivo y descartando lo que no lo es (https://tibble.tidyverse.org/).


Algunos datos de la web, desde un archivo csv ... [véase](#cargar).

```{r}
url="http://freakonometrics.free.fr/german_credit.csv"
dataset <- read.csv(url, header = TRUE, sep = ",")
```

Transformar estos datos a un tibble, utilizando la función as_tibble() del paquete tidyverse.

```{r}
library(tidyverse) # dplyr
dataset <- as_tibble(dataset)
class(dataset)
print(head(dataset, n= 5))
```

Ver los nombres de las variables (columnas).

```{r}
colnames(dataset)
# rownames(dataset) # devuelve los números de las filas...
```

Ver valores para la variable "Creditability" (columna) enuna tabla (de frecuencias).

```{r}
table(dataset$Creditability) # 300 = 0 y 700 = 1, donde 1 significa "buena calidad crediticia"
```


Filtrar el dataset por ejemplo por el campo Creditability == 0, utilizando tidyverse y mostrando las primerar 5 filas.

```{r}
dataset %>%
  filter(Creditability ==0) %>% 
  head(n=5)
```

Ordenar el resultado anterior por la columna edad (Age..years.) de manera descendente.

```{r}
dataset %>%
  filter(Creditability ==0) %>% 
  arrange(desc(Age..years.)) %>% 
  head(n=5)
```

Contar las observaciones por el destino (Purpose) del crédito.

```{r}
dataset %>%
  group_by(Purpose) %>% 
  summarize(cantidad = n())
```

Seleccionar únicamente las columnas Creditability y Credit.Amount del dataset y mostrar las primerar 5 filas..

```{r}
dataset %>%
  select(Creditability, Credit.Amount) %>% 
  head(n=5)
```

Agregar una nueva columna "Avg.Amount" al dataset que contiene el promedio del monto del crédito (Credit.Amount).

```{r}
dataset %>%
  mutate(Avg.Amount = mean(Credit.Amount)) %>% 
  head(n=5)
```

Agregar una nueva columna "Default" al dataset, que contiene el valor "Yes", si el valor del campo "Creditability" es igual a "0", en el caso contrario, colocar el valor "No".

```{r}
dataset %>%
  mutate(Default = ifelse(Creditability==0, 'Yes', 'No')) %>% 
  head(n=5)
```

Ejercicio más avanzado - procesando datos búrsatiles con pipes (%>%)
:

- Cargar el paquete (library) tidyverse
- Bajar los datos de la bolsa del New York Stock Exchange (NYSE), mediante la función tq_exchange("NYSE") y asignar el resultado a la variable "nyese"
- Bajar los datos de la bolsa NASDAQ, mediante la función tq_exchange("NASDAQ") y asignar el resultado a la variable "nasdaq"
- Unir los registros de las dos fuentes de datos (variables) "nyse" y "nasdaq", utlizando la función rbind(), creando una variable nueva "nyse_nasdaq"
- Bajar los datos del indice búrsatil S&P500 (SP500), mediante la función tq_index("SP500") y asignar el resultado a la variable "sp500"
- Une "sp500" y "nyse_nasdaq", utilizando un "inner join" (función inner_join()) y tomando el atributo (columna) "symbol", que tiene estos dos fuentes como elemento en común
- Filtrar por registros, donde el año del IPO (ipo.year) es menor al año 2000 y donde el campo market.cap no tiene datos faltantes (NA)
- Ordenar por el campo 8columna) "weight" de forma descendente
- y mostrar únicamente las primeras 10 filas, utilizando la función slice()
- Mostrar el resultado en la pantalla

Es decir, lo que se hace aquí es, que queremos utilizar el conjunto de datos que consiste por un lado en las diez acciones más grandes dentro del indice S&P500, que tuvieron su IPO antes de enero de 2000. Por otro lado, debemos combinar ambos conjuntos de datos ("S&P500" y "NYSE más NASDAQ", usando un inner join, porque solo queremos mantener los símbolos del S&P500, que también se negocian en NYSE o NASDAQ [Stöckl, S. (21/09/2018). Tidy Portfoliomanagement in R](https://bookdown.org/sstoeckl/Tidy_Portfoliomanagement_in_R/s-2Data.html#fnref1). 

```{r}
library(tidyverse)
nyse <- tq_exchange("NYSE")
nasdaq <- tq_exchange("NASDAQ")
nyse_nasdaq <- rbind(nyse,nasdaq)
sp500 <- tq_index("SP500")
acciones.seleccion <- sp500 %>% 
  inner_join(nyse_nasdaq, by=c("symbol")) %>% 
  select(symbol,last.sale.price, market.cap, weight, ipo.year)%>% # join datasets
  filter(ipo.year<2000 & !is.na(market.cap)) %>% # filter years with ipo<2000 or ipo=NA
  arrange(desc(weight)) %>% # sort in descending order
  slice(1:10)

print(acciones.seleccion) # se puede observar que MSFT (Microsoft) es la empresa "más grande"...
```

